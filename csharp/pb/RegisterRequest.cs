// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterRequest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from RegisterRequest.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RegisterRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for RegisterRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RegisterRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVSZWdpc3RlclJlcXVlc3QucHJvdG8SAnBiIkYKE1JlZ2lzdGVyTm9kZVJl",
            "cXVlc3QSDgoGcmVnaW9uGAEgASgJEg4KBmNpcGhlchgCIAEoDBIPCgdhZGRy",
            "ZXNzGAMgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.RegisterNodeRequest), global::Pb.RegisterNodeRequest.Parser, new[]{ "Region", "Cipher", "Address" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegisterNodeRequest : pb::IMessage<RegisterNodeRequest> {
    private static readonly pb::MessageParser<RegisterNodeRequest> _parser = new pb::MessageParser<RegisterNodeRequest>(() => new RegisterNodeRequest());
    public static pb::MessageParser<RegisterNodeRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.RegisterRequestReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RegisterNodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RegisterNodeRequest(RegisterNodeRequest other) : this() {
      region_ = other.region_;
      cipher_ = other.cipher_;
      address_ = other.address_;
    }

    public RegisterNodeRequest Clone() {
      return new RegisterNodeRequest(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private string region_ = "";
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cipher" field.</summary>
    public const int CipherFieldNumber = 2;
    private pb::ByteString cipher_ = pb::ByteString.Empty;
    public pb::ByteString Cipher {
      get { return cipher_; }
      set {
        cipher_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RegisterNodeRequest);
    }

    public bool Equals(RegisterNodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Region != other.Region) return false;
      if (Cipher != other.Cipher) return false;
      if (Address != other.Address) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Cipher.Length != 0) hash ^= Cipher.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Region.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Region);
      }
      if (Cipher.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Cipher);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Cipher.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cipher);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    public void MergeFrom(RegisterNodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Cipher.Length != 0) {
        Cipher = other.Cipher;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Region = input.ReadString();
            break;
          }
          case 18: {
            Cipher = input.ReadBytes();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
